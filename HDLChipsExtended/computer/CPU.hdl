// This file is part of coursework 2 for COMP1212
// which follows the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Written by Sam Wilson

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
   Mux16(x=instruction, y=ALUOut, sel=instruction[15], out=OutA);

   Not(x=instruction[15],out=NotInstruction);
   Or(x=NotInstruction, y=instruction[5], out=loadA);
   ARegister(in=OutA, load=loadA, out[0..14]=addressM, out=RegisterA);

   And(x=instruction[4], y=instruction[15], out=loadD);
   DRegister(in=ALUOut, load=loadD, out=RegisterD);

   Mux16(x=RegisterA, y=inM, sel=instruction[12], out=MuxAM);

   ALU(x=RegisterD, y=MuxAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUOut, zr=zero, ng=negative);

   And(x=instruction[15], y=instruction[3], out=writeM);

   Or(x=zero, y=negative, out=OrNZ);
   Not(x=OrNZ, out=positive);

   And(x=instruction[2], y=negative, out=NegativeAnd);
   And(x=instruction[1], y=zero, out=ZeroAnd);
   And(x=instruction[0], y=positive, out=PositiveAnd);

   // reduce jump logic to single value (to jump or not to jump. that is the question)
   Or(x=NegativeAnd, y=ZeroAnd, out=Or1);
   Or(x=Or1, y=PositiveAnd, out=Or2);
   And(x=instruction[15], y=Or2, out=Jump);

   PC(x=RegisterA, load=Jump, inc=true, reset=reset, out[0..14]=pc, out[15]=OutFinal);
}
